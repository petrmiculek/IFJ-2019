    .IFJcode19
    JUMP $$main

# Built-in function Ord									
    LABEL $ord													
    PUSHFRAME													
    DEFVAR LF@%retval
    MOVE LF@%retval nil@nil
    DEFVAR LF@cond_range												
    LT LF@cond_range LF@%1 int@0										
    JUMPIFEQ $chr$err LF@cond_range bool@true				
    DEFVAR LF@len
    CREATEFRAME
    DEFVAR TF@%0
    MOVE TF@%0 LF@%0
    CALL $length
    SUB LF@len TF@%retval int@1
    GT LF@cond_range LF@%1 LF@len							   
    JUMPIFEQ $ord$err LF@cond_range bool@true				
    STRI2INT LF@%retval LF@%0 LF@%1										
    JUMP $ord$ok
    LABEL $ord$err
    MOVE LF@%retval nil@nil
    LABEL $ord$ok
    POPFRAME															
    RETURN

# Built-in function Chr										
    LABEL $chr													   
    PUSHFRAME														   
    DEFVAR LF@%retval												   
    MOVE LF@%retval nil@nil										   
    DEFVAR LF@cond_range											   
    LT LF@cond_range LF@%0 int@0									   
    JUMPIFEQ $chr$err LF@cond_range bool@true						
    GT LF@cond_range LF@%0 int@255								   
    JUMPIFEQ $chr$err LF@cond_range bool@true						
    INT2CHAR LF@%retval LF@%0											
    JUMP $chr$ok
    LABEL $chr$err
    EXIT int@4
    LABEL $chr$ok
    POPFRAME															
    RETURN

# Built-in function Inputs											
    LABEL $inputs													
    PUSHFRAME														
    DEFVAR LF@%retval												
    READ LF@%retval string
    POPFRAME														
    RETURN

# Built-in function Inputi											
    LABEL $inputi													
    PUSHFRAME														
    DEFVAR LF@%retval												
    READ LF@%retval int
    POPFRAME														
    RETURN

# Built-in function Inputf											
    LABEL $inputf													
    PUSHFRAME														
    DEFVAR LF@%retval												
    READ LF@%retval float
    POPFRAME														
    RETURN

# Built-in function Print											
    LABEL $print													
    PUSHFRAME														
    DEFVAR LF@%retval
    MOVE LF@%retval nil@nil
   # DEFVAR LF@print_loop_cond
   # DEFVAR LF@pr_arg
   # LABEL $print$loop									
   # GT LF@print_loop_cond LF@%0 int@0							
   # JUMPIFEQ $end$loop LF@print_loop_cond bool@false
    WRITE LF@%0
    WRITE string@\032
   # WRITE string@\010        
   # JUMP $print$loop
   # LABEL $end$loop
    POPFRAME														
    RETURN

# Built-in function Length											
    LABEL $length													
    PUSHFRAME														
    DEFVAR LF@%retval												
    STRLEN LF@%retval LF@%0										
    POPFRAME														
    RETURN

# Built-in function SubStr											
	LABEL $substr												
	PUSHFRAME													
	DEFVAR LF@%retval											
	MOVE LF@%retval string@										
	DEFVAR LF@length_str										
	CREATEFRAME													
	DEFVAR TF@%0												
	MOVE TF@%0 LF@%0											
	CALL $length												
	MOVE LF@length_str TF@%retval								
	DEFVAR LF@ret_cond											
	LT LF@ret_cond LF@length_str int@0							
	JUMPIFEQ $substr$return LF@ret_cond bool@true				
	EQ LF@ret_cond LF@length_str int@0							
	JUMPIFEQ $substr$return LF@ret_cond bool@true				
	LT LF@ret_cond LF@%1 int@0									
	JUMPIFEQ $substr$return LF@ret_cond bool@true				
	DEFVAR LF@range
    ADD LF@range LF@%1 int@1
    GT LF@ret_cond LF@range LF@length_str							
	JUMPIFEQ $substr$return LF@ret_cond bool@true				
	EQ LF@ret_cond LF@%2 int@0									
	JUMPIFEQ $substr$return LF@ret_cond bool@true				
	DEFVAR LF@max_n												
	MOVE LF@max_n LF@length_str									
	SUB LF@max_n LF@max_n LF@%1									
	DEFVAR LF@edit_n_cond										
	LT LF@edit_n_cond LF@%2 int@0								
	JUMPIFEQ $substr$edit_n LF@edit_n_cond bool@true			
	GT LF@edit_n_cond LF@%2 LF@max_n							
	JUMPIFEQ $substr$edit_n LF@edit_n_cond bool@true			
	JUMP $substr$process										
	LABEL $substr$edit_n										
	MOVE LF@%2 LF@max_n											
	LABEL $substr$process										
	DEFVAR LF@index												
	MOVE LF@index LF@%1											
	DEFVAR LF@char												
	DEFVAR LF@process_loop_cond									
	LABEL $substr$process_loop									
	GETCHAR LF@char LF@%0 LF@index								
	CONCAT LF@%retval LF@%retval LF@char						
	ADD LF@index LF@index int@1									
	SUB LF@%2 LF@%2 int@1										
	GT LF@process_loop_cond LF@%2 int@0							
	JUMPIFEQ $substr$process_loop LF@process_loop_cond bool@true
	LABEL $substr$return										
	POPFRAME													
	RETURN													

    LABEL $$main
#testord
    DEFVAR GF@a
    CREATEFRAME
    DEFVAR TF@%0
    MOVE TF@%0 string@ahoj
    DEFVAR TF@%1 
    MOVE TF@%1 int@0
    CALL $ord
    MOVE GF@a TF@%retval
    WRITE string@ord:
    WRITE GF@a

#testchr
    DEFVAR GF@b
    CREATEFRAME
    DEFVAR TF@%0
    MOVE TF@%0 int@97 
    CALL $chr
    MOVE GF@b TF@%retval
    WRITE string@\010chr:
    WRITE GF@b

#testinputi
    DEFVAR GF@c1
    WRITE string@\010input_int:
    CREATEFRAME
    CALL $inputi
    MOVE GF@c1 TF@%retval
    WRITE string@inputi:
    WRITE GF@c1

#testinputf
    DEFVAR GF@c2
    WRITE string@\010input_float:
    CREATEFRAME
    CALL $inputf
    MOVE GF@c2 TF@%retval
    WRITE string@inputf:
    WRITE GF@c2
    
#testinputs
    DEFVAR GF@c3
    WRITE string@\010input_string:
    CREATEFRAME
    CALL $inputs
    MOVE GF@c3 TF@%retval
    WRITE string@inputs:
    WRITE GF@c3
    
#testsubstr
    DEFVAR GF@d
    CREATEFRAME
    DEFVAR TF@%0
    MOVE TF@%0 string@ahoj
    DEFVAR TF@%1
    MOVE TF@%1 int@0
    DEFVAR TF@%2 
    MOVE TF@%2 int@2
    CALL $substr
    MOVE GF@d TF@%retval
    WRITE string@substr\032of\032str\032
    WRITE TF@%0
    WRITE string@\032on\032index\032
    WRITE TF@%1
    WRITE string@\032is:\032
    WRITE GF@d

#testlen
    DEFVAR GF@e
    CREATEFRAME
    DEFVAR TF@%0
    MOVE TF@%0 string@ahoj 
    CALL $length
    MOVE GF@e TF@%retval
    WRITE string@\010len:
    WRITE GF@e
    WRITE string@\010

#testprint
   # DEFVAR GF@f
   # CREATEFRAME
   # DEFVAR TF@%0
   # MOVE TF@%0 int@3
   # DEFVAR TF@%1
   # MOVE TF@%1 int@5
   # DEFVAR TF@%2
   # MOVE TF@%2 string@ahoj
   # DEFVAR TF@%3
   # MOVE TF@%3 float@0x1.2p+0

   # CALL $print
